# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    # Logger service
    Psr\Log\LoggerInterface:
        class: Monolog\Logger
        arguments:
            $name: 'app'
            $handlers: [ '@monolog.handler' ]
    app.monolog_line_formatter:
        class: Monolog\Formatter\LineFormatter
        arguments:
            $format: "[%%datetime%%] %%message%%\n"
            $dateFormat: "Y-m-d H:i:s"

    monolog.handler:
        class: Monolog\Handler\StreamHandler
        arguments:
            $stream: '%kernel.logs_dir%/%kernel.environment%.log'
            $level: !php/const Monolog\Logger::DEBUG

    App\ChainCommandBundle\Service\CommandChainManager:
        arguments:
            $logger: '@monolog.logger.command_chain'
        public: true
        shared: true
    App\ChainCommandBundle\Service\ExecutedCommandsRegistry:
        public: true
        shared: true
    App\ChainCommandBundle\EventListener\CommandChainListener:
        arguments:
            $logger: '@monolog.logger.command_chain'
            $chainManager: '@App\ChainCommandBundle\Service\CommandChainManager'
        tags:
            - { name: 'kernel.event_listener', event: 'console.command', method: 'onConsoleCommand' }
            - { name: 'kernel.event_listener', event: 'console.terminate', method: 'onConsoleTerminate' }
        public: true
    # FooBundle services
    App\FooBundle\Command\FooHelloCommand:
        arguments:
            $logger: '@monolog.logger.command_chain'
            $registry: '@App\ChainCommandBundle\Service\ExecutedCommandsRegistry'
    # BarBundle services
    App\BarBundle\Command\BarHiCommand:
        arguments:
            $logger: '@monolog.logger.command_chain'
            $chainManager: '@App\ChainCommandBundle\Service\CommandChainManager'
            $registry: '@App\ChainCommandBundle\Service\ExecutedCommandsRegistry'
